name: CI - Application

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: library-database
      DB_PORT: 5432
      NEXT_PUBLIC_FRONTEND_PORT: ${{ secrets.NEXT_PUBLIC_FRONTEND_PORT }}
      NEXT_PUBLIC_BACKEND_PORT: ${{ secrets.NEXT_PUBLIC_BACKEND_PORT }}
      NEXT_PUBLIC_BACKEND_HOST: ${{ secrets.NEXT_PUBLIC_BACKEND_HOST }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DJANGO_SUPERUSER_USERNAME: ${{ secrets.DJANGO_SUPERUSER_USERNAME }}
      DJANGO_SUPERUSER_EMAIL: ${{ secrets.DJANGO_SUPERUSER_EMAIL }}
      DJANGO_SUPERUSER_PASSWORD: ${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set environment variables
        run: |
          echo "DB_HOST=library-database" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV

      - name: Build services
        run: docker compose build

      - name: Start database
        run: docker compose up -d library-database

      - name: Wait for Postgres to be healthy
        run: |
          echo "⏳ Waiting for Postgres..."
          for i in {1..15}; do
            if docker compose exec library-database pg_isready -U ${{ secrets.DB_USER }} > /dev/null; then
              echo "✅ Postgres is ready!"
              exit 0
            fi
            sleep 5
          done
          echo "❌ Postgres did not become ready in time" && exit 1

      - name: Run migrations
        env:
          DB_NAME: ${{ secrets.POSTGRES_DB }}
          DB_USER: ${{ secrets.POSTGRES_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: library-database
          DB_PORT: 5432
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: docker compose run --rm library-migration

      - name: Start backend and frontend
        run: docker compose up -d library-backend library-frontend

      - name: Wait for backend to be ready
        run: |
          echo "⏳ Waiting for backend..."
          for i in {1..20}; do
            if curl -s http://localhost:${{ secrets.NEXT_PUBLIC_BACKEND_PORT }}/api/publishing-houses/ > /dev/null; then
              echo "✅ Backend is ready!"
              exit 0
            fi
            sleep 5
          done
          echo "❌ Backend did not respond in time" && exit 1

      - name: Run Playwright tests
        run: docker compose exec library-frontend npm run test

      - name: Stop containers
        if: always()
        run: docker compose down -v